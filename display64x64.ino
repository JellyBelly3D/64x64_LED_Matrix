#include <ESP32-HUB75-MatrixPanel-I2S-DMA.h> // tested using v2.0.7
#include <FastLED.h>                         // tested using v3.4.0

#include <WiFiMulti.h>
#include <WiFiClientSecure.h>

#include <HTTPClient.h>

#include "Wappsto.h"
#include "wappsto_config.h"

#define R1_PIN 25
#define G1_PIN 26
#define B1_PIN 27
#define R2_PIN 14
#define G2_PIN 12
#define B2_PIN 13

#define A_PIN 23
#define B_PIN 22
#define C_PIN 5
#define D_PIN 17
#define E_PIN 21 // required for 1/32 scan panels, like 64x64. Any available pin would do, i.e. IO32

#define LAT_PIN 4
#define OE_PIN 15

#define CLK_PIN 16

#define MATRIX_HEIGHT 64 // Number of pixels wide of each INDIVIDUAL panel module.
#define MATRIX_WIDTH 64  // Number of pixels tall of each INDIVIDUAL panel module.

const char ssid[] = "seluxit_guest";
const char password[] = "sunflower4everyone"; // "sunflower4everyone"

MatrixPanel_I2S_DMA *matrix = nullptr;
WiFiMulti WiFiMulti;
WiFiClientSecure client;
Wappsto wappsto(&client);

HTTPClient http;

Network *myNetwork;
Device *myDevice;
Value *rgbBitmap;
Value *monochromeBitMap;
Value *brightnessValue;
Value *genericCanvas;

DeviceDescription_t myDeviceDescription = {
    .name = "Display",
    .product = "ESP32 64x64 RBG LED Matrix",
    .manufacturer = "",
    .description = "This is a ESP32 64x64 display, it can output a maximum of 80 signs",
    .version = "1.0",
    .serial = "00001",
    .protocol = "Json-RPC",
    .communication = "WiFi",
};

unsigned int e = 0;

const uint8_t wifiIcon8x8[] = {
    B11111111 /*ff*/, B00000000 /*0x00*/, B01111110 /*0x7e*/, B00000000 /*0x00*/, B00111100 /*0x3c*/, B00000000 /*0x00*/,
    B00011000 /*0x18*/, B00011000 /*0x18*/};

uint8_t monoBitmap[512]; // size of the array will change based on size of the image

/*uint16_t cat[] = {0x4c5b, 0x0b5b, 0xea62, 0x0b6b, 0x2b6b, 0x4c73, 0x2c6b, 0x4d6b,
0x4c6b, 0xef7b, 0x6d6b, 0x2c6b, 0x4d6b, 0x2d6b, 0x4d6b, 0x4c6b,
0x6c73, 0x6c6b, 0x6d6b, 0x6d6b, 0x6e6b, 0x8e73, 0x6d6b, 0x8d73,
0x6d6b, 0xae73, 0x6e6b, 0x8f6b, 0xcf6b, 0xaf6b, 0xae73, 0xae6b,
0xcf73, 0xef73, 0xce6b, 0xce73, 0xcf7b, 0xcf7b, 0xae73, 0xce7b,
0xcd83, 0x6ea4, 0xb2e5, 0x91e5, 0xb3e5, 0xb3e5, 0xb2ed, 0x92dd,
0x52cd, 0xed93, 0x7094, 0x5184, 0x3184, 0x5184, 0x518c, 0x5184,
0x3184, 0x5184, 0x518c, 0x518c, 0x3184, 0x107c, 0x107c, 0x0f7c,
0x2c5b, 0x2c63, 0x0b63, 0x0b6b, 0x0b6b, 0x4c6b, 0x4d6b, 0x6d6b,
0x4c6b, 0x6d6b, 0x8d73, 0x6d6b, 0x4d6b, 0x4d6b, 0x4d6b, 0x6d73,
0x4c6b, 0x6d6b, 0x6d6b, 0x6d6b, 0x6e6b, 0x8e6b, 0x6d6b, 0x6d6b,
0x4d6b, 0x6d6b, 0x6e6b, 0x8f6b, 0xaf6b, 0xae6b, 0xcf73, 0xce6b,
0xce6b, 0xcf73, 0xae6b, 0xef7b, 0xcf73, 0xcf7b, 0xce7b, 0x8d73,
0xac8b, 0xd3d5, 0x71dd, 0xd2ed, 0xd3ed, 0x92e5, 0x91e5, 0x71dd,
0x93d5, 0x2e9c, 0x2f8c, 0x3084, 0x3184, 0x3184, 0x518c, 0x3084,
0x5184, 0x5184, 0x5184, 0x518c, 0x5184, 0x5184, 0x3084, 0x107c,
0x2c63, 0xeb5a, 0x0b63, 0x0b63, 0x0c63, 0x0b63, 0x6d6b, 0x6d6b,
0x6c6b, 0x4c6b, 0x8c6b, 0x4c6b, 0x6c6b, 0x4c63, 0x6d6b, 0x6d6b,
0x6d6b, 0x8d6b, 0x6d6b, 0x6d6b, 0x6e6b, 0x8e6b, 0x8e6b, 0x6e6b,
0x6e6b, 0x6e63, 0x8f6b, 0xaf6b, 0xaf6b, 0x8e6b, 0xaf6b, 0xcf6b,
0xef73, 0xae6b, 0xf07b, 0xcf73, 0xf073, 0xef7b, 0xae7b, 0xcd8b,
0x72cd, 0x71dd, 0xd2e5, 0x71dd, 0x92dd, 0xd3ed, 0xb2e5, 0x92dd,
0x93d5, 0x4e9c, 0x0f84, 0x3084, 0x3184, 0x107c, 0x5184, 0x3184,
0x7184, 0x5184, 0x5184, 0x5184, 0x5184, 0x5184, 0x5184, 0x5184,
0x0a6b, 0x0b6b, 0x0b63, 0xeb5a, 0x0c63, 0x4d63, 0x2c63, 0x4c6b,
0x4c6b, 0x8d73, 0x4b6b, 0x8c6b, 0x8d6b, 0x2c63, 0x6d6b, 0x6d6b,
0x6d6b, 0x8e6b, 0x6d6b, 0x6d6b, 0x8e6b, 0x6d6b, 0x8e6b, 0x8e6b,
0x8e6b, 0x6e6b, 0x8e6b, 0xaf6b, 0xaf6b, 0x8e6b, 0x8e6b, 0xae6b,
0xce6b, 0xef73, 0x8e6b, 0xd07b, 0xcf73, 0xcf7b, 0xee8b, 0xd0b4,
0xd2e5, 0x91e5, 0x92dd, 0xf3e5, 0xd2e5, 0xd3ed, 0xb2e5, 0x71dd,
0x72d5, 0x2e9c, 0x2f8c, 0x3084, 0x3184, 0x3184, 0x3084, 0x5184,
0x5184, 0x5184, 0x5184, 0x3184, 0x5184, 0x5184, 0x7184, 0x718c,
0xac93, 0x0a73, 0x0b6b, 0x0b63, 0x2c63, 0x2c63, 0x4d6b, 0x0b63,
0x4c6b, 0x2c63, 0xce7b, 0x6d6b, 0xae73, 0x8d73, 0x4d6b, 0x4d6b,
0x6d6b, 0x8d73, 0x8d73, 0x8e73, 0xae73, 0x4d63, 0x8e6b, 0x8e6b,
0x8e6b, 0x8e6b, 0x6d6b, 0x8e6b, 0xae73, 0xae73, 0x8d6b, 0xae73,
0xae73, 0xcf7b, 0xaf7b, 0xcf7b, 0xcf73, 0xce7b, 0x4fa4, 0x72dd,
0x71e5, 0x91e5, 0x91dd, 0xb2e5, 0x92dd, 0xd2e5, 0x92e5, 0x92dd,
0x51d5, 0x6fa4, 0x0f8c, 0x3084, 0x5184, 0x5184, 0x3184, 0x3184,
0x5184, 0x5184, 0x3184, 0x5184, 0x5184, 0x718c, 0x5184, 0x3184,
0x10c5, 0x6a8b, 0x2a73, 0x0b6b, 0x0c63, 0x2d63, 0x2c63, 0x2c63,
0x2c63, 0x4c6b, 0x6c6b, 0x0f8c, 0x6d73, 0x308c, 0x2d73, 0x2c6b,
0x6d73, 0x4c6b, 0x6d6b, 0x8e6b, 0xce73, 0x6d6b, 0x6d6b, 0x6d6b,
0x6d6b, 0x8d73, 0x6d6b, 0x6d6b, 0xae73, 0xae73, 0x8e73, 0xae7b,
0xae7b, 0xcf7b, 0xae7b, 0xae7b, 0xce83, 0xad83, 0x52d5, 0x71e5,
0x50dd, 0x70e5, 0x91e5, 0x92dd, 0xd3e5, 0xb2e5, 0xd3ed, 0x51dd,
0x51cd, 0xb0b4, 0x0e8c, 0x3084, 0x5184, 0x3184, 0x518c, 0x3184,
0x5184, 0x5184, 0x5184, 0x3184, 0x3184, 0x3184, 0x3184, 0x3184,
0x0fd5, 0x30d5, 0x6a8b, 0x0a73, 0x2b6b, 0x2c63, 0x2c63, 0x0c63,
0x2c6b, 0x4c6b, 0x4c73, 0x4c7b, 0x2f94, 0x6c83, 0x50a4, 0x6c7b,
0x6d73, 0x2c6b, 0x4d6b, 0x6d6b, 0xaf73, 0x8d6b, 0x6d6b, 0x4c6b,
0x8d73, 0x6d73, 0x8d73, 0x6d6b, 0x8e73, 0x8d73, 0xef83, 0xae83,
0xae83, 0x8d7b, 0xad7b, 0xac83, 0xac8b, 0x8fb4, 0x92e5, 0x71e5,
0x50e5, 0x91e5, 0x91e5, 0xb2dd, 0xd3e5, 0xb2e5, 0xb2ed, 0xb2e5,
0x51d5, 0xf0bc, 0x0e8c, 0x5084, 0x5084, 0x1084, 0x518c, 0x3184,
0x5184, 0x5184, 0x3184, 0x3184, 0x1184, 0x107c, 0x3184, 0x5184,
0x4fe5, 0x0fdd, 0x10cd, 0x4a8b, 0x4b7b, 0x0b6b, 0x0b6b, 0x0b6b,
0x2b6b, 0x6c7b, 0x4b7b, 0x4a83, 0x6b93, 0x2da4, 0x2dac, 0x8fb4,
0x4c83, 0x4c7b, 0x8d7b, 0x6d73, 0xad7b, 0x6c73, 0x4c73, 0x6c7b,
0x8c83, 0x6c7b, 0xcd83, 0x8d7b, 0xad83, 0x8d83, 0x4fa4, 0x0e94,
0x0e94, 0xac83, 0x0d94, 0xcc93, 0x2dac, 0x71dd, 0x91e5, 0x4fdd,
0x70e5, 0x91e5, 0xb1e5, 0xd2e5, 0xd3e5, 0xf3ed, 0xd3ed, 0x92e5,
0xb2dd, 0x11bd, 0x0e8c, 0x3084, 0x518c, 0x518c, 0x3084, 0x3084,
0x307c, 0x307c, 0x307c, 0x3184, 0x3184, 0x3184, 0x3184, 0x3184,
0xcedc, 0x0fdd, 0x0fdd, 0x50d5, 0x6a93, 0x2a83, 0x6b83, 0x4b7b,
0x6a83, 0x6a83, 0xab9b, 0x288b, 0xaaa3, 0xcaab, 0x0fd5, 0xaec4,
0x8ebc, 0xac9b, 0x6b8b, 0x4a83, 0xac93, 0x6a8b, 0x8a93, 0x8a93,
0xcba3, 0x2dac, 0x8b93, 0xab93, 0x0da4, 0xeca3, 0x2db4, 0x4db4,
0x6eb4, 0xec9b, 0x4dac, 0x2cac, 0x50dd, 0x2fdd, 0x70e5, 0x4fdd,
0x70e5, 0x91ed, 0xb2ed, 0xd2ed, 0xf3ed, 0xf3ed, 0xd3ed, 0x72e5,
0xb2e5, 0xb3d5, 0x909c, 0x508c, 0x3084, 0x3084, 0x3184, 0x5184,
0x317c, 0x317c, 0x5184, 0x3184, 0x3184, 0x3184, 0x3184, 0x5184,
0xcedc, 0x6cd4, 0x0ee5, 0xced4, 0xefcc, 0xcba3, 0x0da4, 0x2da4,
0x2cac, 0x6db4, 0xadc4, 0x8cc4, 0xadcc, 0xacd4, 0xacd4, 0x4ee5,
0x70e5, 0x2fd5, 0x0cb4, 0x0cb4, 0x8dbc, 0xebab, 0x8dc4, 0xadcc,
0xadcc, 0xadcc, 0xaecc, 0xaecc, 0x4cbc, 0xcecc, 0xadcc, 0x0fdd,
0x50dd, 0xefcc, 0x30d5, 0x0fd5, 0x2edd, 0x0ddd, 0x2fdd, 0x70e5,
0x70e5, 0x70e5, 0x50e5, 0x91e5, 0xb2e5, 0xb2e5, 0x92ed, 0x51dd,
0xf0cc, 0x8fb4, 0x0f94, 0x0f84, 0x1084, 0x518c, 0x3084, 0x5184,
0x317c, 0x517c, 0x5184, 0x3184, 0x3184, 0x3184, 0x317c, 0x3184,
0x6dd4, 0x0bc4, 0xcddc, 0x0ee5, 0x6ccc, 0xadcc, 0x6dbc, 0xeecc,
0x0bb4, 0xedd4, 0x8ccc, 0x0ddd, 0x0de5, 0xacdc, 0xccdc, 0xccdc,
0x2ee5, 0xcddc, 0x6cc4, 0x6ccc, 0xadcc, 0xcdd4, 0xeddc, 0x4fe5,
0x2ee5, 0x2ee5, 0x0ee5, 0xacd4, 0xaddc, 0xacdc, 0xacdc, 0xccdc,
0xccdc, 0x4fe5, 0xd1f5, 0x90e5, 0x8fed, 0x6fed, 0x90ed, 0x4fe5,
0x70e5, 0x90e5, 0x4fe5, 0xb1ed, 0xd2ed, 0xb2e5, 0xd3ed, 0x92e5,
0x72dd, 0x8fb4, 0x2f94, 0x508c, 0x3084, 0x3084, 0x518c, 0x3184,
0x5184, 0x517c, 0x5184, 0x5184, 0x3184, 0x5184, 0x3184, 0x3184,
0xcfdc, 0xefdc, 0x4cd4, 0x6cd4, 0x8cd4, 0x8ccc, 0xeedc, 0x2fdd,
0xcdd4, 0xcddc, 0xacdc, 0x2eed, 0xccdc, 0x8bd4, 0x8bdc, 0x8bdc,
0xede4, 0x6fed, 0x6ff5, 0x2ee5, 0x2ac4, 0x8bd4, 0x0de5, 0x2eed,
0x8ff5, 0x2eed, 0xede4, 0xacdc, 0x4ef5, 0xcce4, 0xcce4, 0xcce4,
0xece4, 0x6ef5, 0x2ee5, 0x6fed, 0xd0f5, 0x2ee5, 0xb0f5, 0x4fe5,
0x4fe5, 0xb0ed, 0x90e5, 0xb1ed, 0xb2ed, 0xd3ed, 0xb2ed, 0x30d5,
0x51d5, 0x4eac, 0xee8b, 0x308c, 0x3084, 0x1084, 0x518c, 0x5184,
0x5184, 0x517c, 0x5184, 0x5184, 0x3184, 0x5184, 0x5184, 0x5184,
0x4dcc, 0xcfdc, 0x6ccc, 0x2bcc, 0xacd4, 0x4bcc, 0xacd4, 0x2ee5,
0xacdc, 0x4bd4, 0x4bd4, 0xacdc, 0x2acc, 0x2eed, 0xcddc, 0xacdc,
0x0de5, 0x4eed, 0x6fed, 0x6fed, 0x4eed, 0xede4, 0xacdc, 0xccdc,
0x2eed, 0xede4, 0x2acc, 0xacdc, 0x2ded, 0xabdc, 0xccdc, 0xabdc,
0xcbe4, 0x8adc, 0xccdc, 0x4fe5, 0x6fed, 0x4fe5, 0x8ff5, 0xf1fd,
0xd0f5, 0xd1ed, 0xb0e5, 0xb1ed, 0xb2f5, 0xd3f5, 0xb2ed, 0x71dd,
0x30cd, 0x0da4, 0x2f94, 0x3084, 0x518c, 0x5184, 0x3184, 0x3184,
0x317c, 0x307c, 0x317c, 0x5184, 0x3184, 0x3184, 0x5184, 0x5184,
0xefdc, 0xcab3, 0x6dcc, 0x6ccc, 0x8cd4, 0x4bcc, 0x6bd4, 0xede4,
0xccdc, 0xacdc, 0xede4, 0x6bd4, 0xede4, 0x4bcc, 0xccdc, 0x0de5,
0x2ee5, 0xccdc, 0x6eed, 0x6fed, 0x4eed, 0x6bd4, 0x8bd4, 0xcce4,
0x2ded, 0x0ded, 0xccdc, 0x8bd4, 0xacdc, 0x0de5, 0x8bdc, 0xcce4,
0x49dc, 0xe8cb, 0x2ded, 0x4eed, 0x0ee5, 0x4fe5, 0x8fed, 0x8fed,
0x12fe, 0xd1ed, 0xd1ed, 0xb1e5, 0xb2ed, 0xb2f5, 0xd2ed, 0xb2e5,
0x31d5, 0x6fac, 0x2f94, 0x1084, 0x3184, 0x5184, 0x3184, 0x3184,
0x317c, 0x517c, 0x317c, 0x5184, 0x3184, 0x3184, 0x5184, 0x5184,
0x2ccc, 0xaed4, 0xcfd4, 0x2cbc, 0xeedc, 0xacd4, 0x4acc, 0x8bdc,
0xccdc, 0xabdc, 0x0de5, 0x0de5, 0xabd4, 0x0de5, 0x6eed, 0x4de5,
0xecdc, 0x4eed, 0xeddc, 0xecd4, 0x90ed, 0xccdc, 0x4acc, 0x09cc,
0xabdc, 0x6ef5, 0x2eed, 0x8bd4, 0x8bd4, 0xacd4, 0xccdc, 0xcce4,
0x08cc, 0x09d4, 0x8bdc, 0x2eed, 0x0de5, 0xacd4, 0xd0f5, 0x6ee5,
0xd0ed, 0x12f6, 0x53fe, 0xf2ed, 0xf2f5, 0xd2ed, 0xf2f5, 0x71dd,
0xb3e5, 0x11c5, 0x709c, 0x308c, 0x3184, 0x107c, 0x5184, 0x307c,
0x517c, 0x5184, 0x317c, 0x3084, 0x3184, 0x3184, 0x5184, 0x5184,
0x8dd4, 0x4cc4, 0xced4, 0x6dc4, 0x50e5, 0x0edd, 0x4eed, 0x8bd4,
0xccdc, 0x0de5, 0xabdc, 0xece4, 0xcbdc, 0x4ded, 0x2de5, 0x2de5,
0x6eed, 0x6eed, 0x8fed, 0x8fed, 0x8fed, 0x8ff5, 0x8bd4, 0x29cc,
0x29cc, 0x4eed, 0x8ff5, 0x6fed, 0x6bcc, 0xe9bb, 0xccdc, 0xcce4,
0x49d4, 0x6adc, 0x09cc, 0xcce4, 0xede4, 0xeddc, 0x8fed, 0x6fed,
0xafed, 0xd0ed, 0xd2f5, 0x12f6, 0x33fe, 0xb0ed, 0xd2ed, 0x91e5,
0x92e5, 0xf0bc, 0x90a4, 0x508c, 0x3084, 0x3184, 0x3084, 0x107c,
0x307c, 0x517c, 0x107c, 0x107c, 0x3184, 0x3184, 0x5184, 0x5184,
0x8dcc, 0x8dcc, 0x6dcc, 0xadd4, 0x6ccc, 0xeddc, 0xeddc, 0x0de5,
0x8bd4, 0xabd4, 0xecdc, 0xece4, 0xcbdc, 0xcbdc, 0xabdc, 0xcbdc,
0xcbdc, 0x2de5, 0x6ded, 0x6eed, 0xf1fd, 0x90f5, 0xb0f5, 0xeddc,
0xe9c3, 0xccdc, 0x90ed, 0xd1f5, 0x2ee5, 0xe9c3, 0xede4, 0xacdc,
0xe8cb, 0x09cc, 0xc8c3, 0x0ded, 0x0de5, 0xccdc, 0x4eed, 0x6fed,
0xeddc, 0x4ee5, 0x90ed, 0xf2f5, 0x12f6, 0x90e5, 0x90ed, 0x90ed,
0xb1e5, 0x8eb4, 0x90ac, 0x7194, 0x518c, 0x3184, 0x3184, 0x307c,
0x317c, 0x5184, 0x5184, 0x3184, 0x3184, 0x3184, 0x3184, 0x3184,
0xadd4, 0xeedc, 0xeedc, 0xadd4, 0x8cd4, 0xcddc, 0xacd4, 0x6ff5,
0x0de5, 0xecdc, 0x0ce5, 0x0ce5, 0x0de5, 0xece4, 0x8bdc, 0x8bdc,
0x0ce5, 0x0ce5, 0x6ded, 0x4eed, 0x8fed, 0xf1fd, 0xb0ed, 0xd0f5,
0x4bd4, 0xccdc, 0xd1f5, 0xb0ed, 0x0edd, 0x4bcc, 0xcde4, 0x8cdc,
0xace4, 0x09d4, 0xc8c3, 0x09c4, 0xede4, 0xacdc, 0xcddc, 0x4fed,
0x2ee5, 0x0de5, 0x4fe5, 0xb0ed, 0xd1ed, 0x90e5, 0xf1f5, 0xd1f5,
0xb1ed, 0x50d5, 0xb0b4, 0x2f9c, 0x108c, 0x3184, 0x1084, 0x307c,
0x3184, 0x5184, 0x5184, 0x3184, 0x3184, 0x3184, 0x3184, 0x3184,
0x2fe5, 0x2fe5, 0x90ed, 0xcdd4, 0xacd4, 0x2ee5, 0x0de5, 0xeddc,
0x8ff5, 0xeddc, 0x2de5, 0x0de5, 0x4ded, 0x0ce5, 0x2de5, 0x2ded,
0x4ded, 0x4ee5, 0xeddc, 0x6fed, 0x6fed, 0xd0f5, 0xafed, 0xb0ed,
0x8eed, 0x8bd4, 0xb0f5, 0xb0f5, 0x0de5, 0xccdc, 0x2acc, 0x6bd4,
0x2ded, 0x09cc, 0xe9cb, 0xa8bb, 0xede4, 0x4bcc, 0xacdc, 0x6fed,
0x4ee5, 0xcdd4, 0x4fe5, 0xd1ed, 0xd1ed, 0xf1f5, 0x32fe, 0xf1f5,
0xd0f5, 0x70dd, 0xafbc, 0x4fa4, 0x709c, 0x518c, 0x3184, 0x3184,
0x307c, 0x3184, 0x3184, 0x3084, 0x107c, 0x107c, 0x3184, 0x3184,
0xeedc, 0x0edd, 0xeddc, 0x0ee5, 0x8cd4, 0x8cd4, 0x4eed, 0x0de5,
0xccdc, 0x6bcc, 0xecdc, 0x4ee5, 0x0de5, 0x4de5, 0x4eed, 0x6eed,
0x0de5, 0x0de5, 0x2eed, 0x2ee5, 0x8ff5, 0x6eed, 0x90ed, 0xb0f5,
0x8fed, 0xecdc, 0x4fed, 0x2fe5, 0xcddc, 0xcddc, 0xe9bb, 0x8bd4,
0xacdc, 0xacdc, 0x8bdc, 0x4bd4, 0xede4, 0xacd4, 0xeddc, 0xeddc,
0x4fe5, 0xcdd4, 0x90e5, 0xb1ed, 0xf1f5, 0x32fe, 0xf1fd, 0xd1f5,
0xd1f5, 0x90e5, 0x51dd, 0x11c5, 0xd1ac, 0x3094, 0x518c, 0x5184,
0x307c, 0x3184, 0x3084, 0x107c, 0x107c, 0x107c, 0x1184, 0x3184,
0xeddc, 0xeddc, 0x0ee5, 0xcddc, 0x0de5, 0x2acc, 0xccdc, 0x4eed,
0x2ee5, 0x2ee5, 0x8ff5, 0x6fed, 0x2ee5, 0x0de5, 0x0de5, 0xcddc,
0x8ddc, 0x6cd4, 0x8cdc, 0x6bd4, 0xcbdc, 0xece4, 0x2fed, 0x2ee5,
0x90ed, 0x0edd, 0x30e5, 0x51ed, 0xaddc, 0x4bcc, 0x6ccc, 0x8ccc,
0xadd4, 0xaddc, 0xccdc, 0x6bd4, 0x2eed, 0xaddc, 0xcddc, 0x0ee5,
0x0ddd, 0xeddc, 0x90ed, 0xb1ed, 0xb1f5, 0xb0f5, 0x4fed, 0x2de5,
0x8ff5, 0x90ed, 0xf2f5, 0x71dd, 0xd0b4, 0x5094, 0x518c, 0x3184,
0x3184, 0x3184, 0x3084, 0x107c, 0x107c, 0x107c, 0x3184, 0x3184,
0xcddc, 0xcddc, 0xeddc, 0xeddc, 0x8bd4, 0xccdc, 0x6bd4, 0xcddc,
0x4eed, 0x4eed, 0x2ee5, 0xeddc, 0xeddc, 0x6cd4, 0x4bcc, 0x0bc4,
0xaac3, 0x28ab, 0xa79a, 0x658a, 0x6492, 0x06a3, 0x0bc4, 0xefdc,
0x2fe5, 0x2fdd, 0x50e5, 0xefdc, 0xaddc, 0x8dd4, 0xadd4, 0x8ccc,
0xcedc, 0x8cd4, 0xede4, 0xe9c3, 0xaddc, 0xcddc, 0xcddc, 0x2ee5,
0x4ee5, 0x90ed, 0x90ed, 0x91ed, 0x70ed, 0x8cd4, 0x0acc, 0x4bcc,
0xccdc, 0x2ee5, 0xb1f5, 0x91e5, 0x10c5, 0x90a4, 0x308c, 0x3184,
0x3184, 0x3184, 0x107c, 0x107c, 0x307c, 0x107c, 0x3184, 0x3184,
0x6ccc, 0xacd4, 0x8cd4, 0x0ee5, 0xacdc, 0xede4, 0x4eed, 0x2de5,
0x4eed, 0x0de5, 0x6bd4, 0xaddc, 0x6cd4, 0x2bcc, 0xaabb, 0x08ab,
0x4592, 0xa058, 0x2259, 0xc148, 0x8048, 0xe158, 0xc479, 0x0482,
0xadd4, 0x2ee5, 0x70ed, 0x2fe5, 0xadd4, 0xaddc, 0x8ccc, 0x6ccc,
0x0ee5, 0xcddc, 0x0ee5, 0xcddc, 0xcddc, 0x4fed, 0xeddc, 0x6fed,
0x90f5, 0x91ed, 0x91e5, 0x4cbc, 0xe792, 0x2482, 0x08ab, 0x89bb,
0x0ac4, 0xcddc, 0x70ed, 0xd1ed, 0x51cd, 0x6ea4, 0x0f8c, 0x518c,
0x3184, 0x317c, 0x107c, 0x107c, 0x307c, 0x307c, 0x3184, 0x3184,
0x6ccc, 0xaddc, 0xacdc, 0xacdc, 0x0de5, 0x4eed, 0xece4, 0xecdc,
0x6bd4, 0x09c4, 0xa8bb, 0x47ab, 0x27ab, 0xc6a2, 0xa69a, 0xe060,
0x6271, 0x6361, 0xe240, 0x0341, 0x2349, 0x0351, 0xe150, 0x2161,
0xe379, 0xcedc, 0x4fe5, 0x70ed, 0xcdd4, 0xcddc, 0x4bcc, 0x2bc4,
0x8cd4, 0x0ee5, 0xeddc, 0x8cd4, 0x0ee5, 0x2ee5, 0x2ee5, 0x6fed,
0xb0f5, 0x70e5, 0xaaab, 0xc048, 0x4259, 0xa469, 0xa379, 0x2492,
0xcac3, 0x6cd4, 0x2ee5, 0x90e5, 0x50d5, 0x4da4, 0x0f94, 0x0f84,
0x3184, 0x107c, 0x107c, 0x107c, 0x3184, 0x307c, 0x107c, 0x307c,
0x4bcc, 0x8cd4, 0x6bd4, 0xacdc, 0xede4, 0x8bd4, 0x6ad4, 0x6ad4,
0x2ac4, 0xc9bb, 0x68ab, 0x68ab, 0x48ab, 0xa692, 0xe060, 0x0482,
0xa78a, 0x8359, 0xa130, 0xe328, 0x54c5, 0xa972, 0x056a, 0xc048,
0x8369, 0x28a3, 0xcdd4, 0xd1f5, 0x70ed, 0x0edd, 0x4bcc, 0x0ac4,
0x8cd4, 0xaddc, 0x70f5, 0xede4, 0x0de5, 0x0de5, 0x4ee5, 0xd0f5,
0xb0f5, 0x4bbc, 0x4151, 0x0149, 0xa551, 0x8972, 0x2682, 0x4692,
0x8abb, 0x2bc4, 0x0ddd, 0x6fe5, 0xd1e5, 0xcfbc, 0x4fa4, 0x5094,
0x3084, 0x3184, 0xf07b, 0xf07b, 0x107c, 0x107c, 0x307c, 0x307c,
0x4bcc, 0x4bcc, 0xede4, 0xacdc, 0x8bd4, 0x0de5, 0xecdc, 0x4eed,
0x0de5, 0x4ee5, 0x0edd, 0xeedc, 0x70ed, 0x07a3, 0x0482, 0x69ab,
0x2cb4, 0xcb9b, 0x6341, 0xc128, 0x0231, 0xc872, 0xa67a, 0x8261,
0xc050, 0x6269, 0x89ab, 0xb1f5, 0xd1f5, 0x6fe5, 0xacd4, 0x4bcc,
0xcddc, 0x2fed, 0xeddc, 0xeddc, 0x2ee5, 0x2ee5, 0x8fed, 0x11fe,
0x4ee5, 0xa48a, 0xcaa3, 0xc038, 0x686a, 0x4862, 0x8782, 0x08a3,
0x4dcc, 0xadd4, 0x2ee5, 0xafed, 0xb0e5, 0x0fc5, 0x2ea4, 0x0e94,
0x0f84, 0x1084, 0xf07b, 0xf07b, 0x1184, 0x3084, 0x307c, 0x307c,
0x6bd4, 0xacdc, 0x6ff5, 0x0de5, 0x0de5, 0xcddc, 0xacd4, 0x0ddd,
0x4ee5, 0xd1f5, 0xf1f5, 0xd1f5, 0x12fe, 0x90ed, 0x88ab, 0x2edd,
0xacc4, 0x6bb4, 0x698b, 0xe038, 0x6249, 0xaa9b, 0xcdcc, 0x6482,
0xc048, 0xe469, 0xc792, 0x92ed, 0xf2f5, 0xd1f5, 0x2ee5, 0xcddc,
0x2fed, 0x0ee5, 0x6ff5, 0xeddc, 0x0de5, 0xede4, 0xeddc, 0x11fe,
0xcff5, 0x0ddd, 0x8cc4, 0xa67a, 0xe138, 0x6449, 0x289b, 0x0bc4,
0x4dcc, 0x50ed, 0xb0f5, 0xafed, 0xd0ed, 0xd1e5, 0x30cd, 0x6fa4,
0x0f94, 0xef83, 0x1084, 0x1184, 0x1184, 0x1184, 0x307c, 0x307c,
0xccdc, 0xeddc, 0x4eed, 0x2ee5, 0x8bd4, 0x6bd4, 0x4eed, 0xb0f5,
0xb0f5, 0xb0f5, 0x8fed, 0x0ddd, 0x11fe, 0xb0ed, 0x11fe, 0xccd4,
0x4ddd, 0x6abc, 0x6893, 0x2049, 0x2051, 0x4bbc, 0xabd4, 0xccd4,
0xe048, 0xe148, 0x8bab, 0x6dcc, 0x30e5, 0x70ed, 0x8fed, 0x4ee5,
0x8cdc, 0xacdc, 0xacdc, 0x0ac4, 0x4ad4, 0x0ded, 0xecdc, 0x4ee5,
0xcffd, 0x4ded, 0xccd4, 0xcdcc, 0x6249, 0xe040, 0x89a3, 0x8cd4,
0x0bc4, 0x70ed, 0x12fe, 0x32fe, 0x11fe, 0xf1f5, 0xb2e5, 0x11c5,
0x2e9c, 0xef8b, 0x1084, 0x3184, 0x1184, 0x107c, 0x307c, 0x507c,
0x2ee5, 0x4eed, 0xeddc, 0x4acc, 0xc9bb, 0x4acc, 0xacdc, 0x4eed,
0x4fed, 0x2ee5, 0x0ddd, 0x2ee5, 0x8bd4, 0x4ee5, 0x8fed, 0x11fe,
0xaff5, 0xccd4, 0x0dd5, 0x6ac4, 0x8acc, 0x69cc, 0xebe4, 0xe8c3,
0x447a, 0xe048, 0x8aab, 0xcbbb, 0xa9bb, 0x6bdc, 0xabdc, 0xece4,
0x8bdc, 0x6bd4, 0x2bcc, 0xcac3, 0x6bdc, 0x09d4, 0x29cc, 0x6ad4,
0x4ad4, 0xe9c3, 0xcce4, 0xacd4, 0xa8a3, 0x88a3, 0x6bcc, 0x6bcc,
0xa592, 0x70ed, 0xf1fd, 0xf1fd, 0x11fe, 0x12fe, 0xf2f5, 0xd2e5,
0xafb4, 0x0e94, 0xef83, 0x1084, 0xf07b, 0xf07b, 0x107c, 0x307c,
0xccdc, 0x6bcc, 0x4bcc, 0x09c4, 0x4bd4, 0xccdc, 0xcddc, 0xacdc,
0xacdc, 0x2eed, 0xccdc, 0xece4, 0xabdc, 0xccdc, 0x8bd4, 0x6ad4,
0x0ce5, 0x4ded, 0xaefd, 0x4ced, 0xebdc, 0xcadc, 0xe7cb, 0x0ced,
0xb1ed, 0x30dd, 0xeedc, 0xcabb, 0xe5aa, 0x26bb, 0x09cc, 0x8adc,
0x6ad4, 0x88bb, 0xeac3, 0x8cdc, 0x2ad4, 0xe8cb, 0xe8cb, 0x6bdc,
0x2ad4, 0xe9cb, 0x09d4, 0xece4, 0x29c4, 0x09bc, 0xc8bb, 0x8bd4,
0x11fe, 0x12fe, 0xd1fd, 0xf1fd, 0xb0fd, 0x4eed, 0xb0f5, 0x90e5,
0x51d5, 0x6fac, 0x0f94, 0x308c, 0x3184, 0x317c, 0x307c, 0x317c,
0xccdc, 0x8bd4, 0x2acc, 0xc8bb, 0x8bd4, 0x4acc, 0x4ad4, 0x8bdc,
0x4ad4, 0x09cc, 0xabe4, 0xcce4, 0xe8cb, 0xc8cb, 0xc8cb, 0xe9cb,
0x4adc, 0x29d4, 0x8ae4, 0xcae4, 0x2ced, 0xaffd, 0xaffd, 0xcffd,
0x6ff5, 0x4acc, 0xe9c3, 0xe9cb, 0x05b3, 0x46bb, 0x6adc, 0xe8cb,
0x09cc, 0x09cc, 0x88bb, 0xe9cb, 0x8ce4, 0xadec, 0x8de4, 0xade4,
0xade4, 0x8ce4, 0x2ad4, 0x8be4, 0xcce4, 0x8ff5, 0xf0fd, 0xaff5,
0x8fed, 0xacd4, 0xcddc, 0xcde4, 0x0ded, 0x4ad4, 0xecdc, 0x4ee5,
0x2fd5, 0x4eac, 0xee93, 0x0f84, 0x107c, 0x517c, 0x317c, 0x3184,
0x8bd4, 0x2ac4, 0x87b3, 0x06ab, 0x46ab, 0x67b3, 0x26b3, 0xc8c3,
0x67bb, 0x25b3, 0x87c3, 0x4adc, 0xc8cb, 0xabec, 0x09d4, 0x4adc,
0xa7cb, 0xe8cb, 0xe7d3, 0xc7cb, 0xe8cb, 0x6ad4, 0x09cc, 0xabdc,
0x8adc, 0x8adc, 0x29d4, 0x29d4, 0x29d4, 0x09d4, 0x8bdc, 0x4adc,
0xc8c3, 0x67b3, 0xe5aa, 0x4bd4, 0x4bdc, 0x2bdc, 0x2cdc, 0xaeec,
0x2492, 0x2bd4, 0x6bdc, 0xabe4, 0x8bdc, 0xabdc, 0x8bd4, 0xcbd4,
0xabd4, 0x8bd4, 0xace4, 0x4bd4, 0xcde4, 0xedec, 0x0ce5, 0x2de5,
0x0ed5, 0x4db4, 0x2e9c, 0x0f8c, 0x107c, 0x307c, 0x107c, 0x3184,
0x2acc, 0x26a3, 0xe59a, 0x47ab, 0x06a3, 0x8492, 0xc5a2, 0xa49a,
0x67bb, 0x87bb, 0x87bb, 0xa7c3, 0xc8cb, 0xe8cb, 0x09cc, 0x6adc,
0x4adc, 0x87c3, 0x08d4, 0xc8cb, 0x29d4, 0xe8cb, 0xe8cb, 0x6adc,
0x8adc, 0xcbdc, 0x8ad4, 0xecdc, 0x0ce5, 0xabdc, 0x4ad4, 0x8cdc,
0x2ad4, 0xa8bb, 0xa8c3, 0x68bb, 0xa9cb, 0x69cb, 0xaad3, 0xcbdb,
0x0cdc, 0x2cdc, 0x2ad4, 0x4ff5, 0x4eed, 0x4eed, 0x8ef5, 0xcff5,
0x8ff5, 0x8cd4, 0x6bd4, 0x4bd4, 0x4ad4, 0x8bdc, 0xece4, 0xccdc,
0xadd4, 0x0cac, 0xed93, 0x0f8c, 0x1084, 0x3084, 0x107c, 0x528c,
0x25ab, 0x06a3, 0x05a3, 0x2ac4, 0xe9bb, 0x67ab, 0xe6a2, 0xc9bb,
0xc8bb, 0xc4a2, 0x87bb, 0x09cc, 0x09cc, 0xe8c3, 0x67b3, 0x67bb,
0x87bb, 0xc8cb, 0xc8cb, 0x29d4, 0x4adc, 0x8adc, 0xc8cb, 0x0ced,
0x2ded, 0x2de5, 0x8ef5, 0x8ff5, 0x6ef5, 0x4eed, 0x2eed, 0xacdc,
0xe9c3, 0x6392, 0x06ab, 0xe6aa, 0x449a, 0x2060, 0x49cb, 0x49d3,
0x4dec, 0xe7ba, 0xeacb, 0x2eed, 0x8ff5, 0xf1fd, 0xf0fd, 0xcff5,
0x8ff5, 0xf1fd, 0xcde4, 0x8bdc, 0x2acc, 0x6ad4, 0x4ad4, 0x0acc,
0x6ccc, 0x8ebc, 0x4fa4, 0x0f8c, 0xef7b, 0x3084, 0x3184, 0x1184,
0xe5a2, 0x67b3, 0xe9bb, 0x6ccc, 0x2ac4, 0x0abc, 0xa9b3, 0xa492,
0x06a3, 0x26ab, 0x46ab, 0xe9c3, 0xa8bb, 0x67b3, 0x47b3, 0x26ab,
0xa8bb, 0x66b3, 0x46b3, 0xa7bb, 0x2ad4, 0xabdc, 0x0ded, 0xcce4,
0x4ded, 0x6ef5, 0x8ff5, 0x8ff5, 0x4eed, 0x6ef5, 0x2de5, 0xaffd,
0x4eed, 0x70f5, 0x0ee5, 0x2bcc, 0x859a, 0xe070, 0x8ad3, 0xaad3,
0x2de4, 0x249a, 0x4cd4, 0x6fed, 0xb0ed, 0x8fed, 0xd0f5, 0xf0fd,
0xb0f5, 0xb0f5, 0x6fed, 0x0de5, 0x6acc, 0x0de5, 0xede4, 0x8cd4,
0x8ccc, 0x4db4, 0xcd93, 0x3094, 0x308c, 0x3084, 0x5184, 0x3184,
0x67ab, 0xa9b3, 0x8ccc, 0xadcc, 0xa9b3, 0xa9b3, 0x88ab, 0xa9b3,
0x06a3, 0xa8b3, 0xe5a2, 0x67b3, 0xc59a, 0xc5a2, 0x88b3, 0x87b3,
0x67b3, 0xc9c3, 0x6ad4, 0x4ad4, 0xc8bb, 0xccdc, 0x4eed, 0xccdc,
0x6ff5, 0x2ded, 0x6ff5, 0x6ff5, 0x4eed, 0x6fed, 0x2de5, 0x0de5,
0x4fed, 0x2ee5, 0x70f5, 0x2fed, 0x71f5, 0x6edc, 0xe8ba, 0x6acb,
0xabcb, 0x10f5, 0xb1fd, 0x33fe, 0x12f6, 0xf1ed, 0xb0ed, 0xd0f5,
0xd0f5, 0xb0f5, 0xafed, 0xb0f5, 0x2ee5, 0x2ee5, 0x2acc, 0xadd4,
0x2fdd, 0xcfc4, 0x0e9c, 0x5094, 0x308c, 0x3084, 0x928c, 0x928c,
0x2bc4, 0x0abc, 0xc9b3, 0x0abc, 0x2bbc, 0xeab3, 0x88a3, 0xa9ab,
0x68a3, 0x069b, 0x67ab, 0x67ab, 0x4bcc, 0xe9bb, 0xc9bb, 0x6bcc,
0x2ac4, 0x67b3, 0x88b3, 0x0ac4, 0xcddc, 0xcddc, 0x0ee5, 0x8cdc,
0xcddc, 0x6bd4, 0x2acc, 0x2acc, 0xede4, 0x2eed, 0x8ff5, 0x0de5,
0xeddc, 0xeddc, 0x2ee5, 0x70ed, 0xd2fd, 0x51f5, 0x2ddc, 0xabcb,
0xcbc3, 0x51f5, 0x14fe, 0x53fe, 0x53f6, 0xf1ed, 0xd1f5, 0xb0f5,
0xb0f5, 0x4ee5, 0x31fe, 0xb0ed, 0x4fe5, 0x6ccc, 0xadd4, 0xeedc,
0xcecc, 0x8eb4, 0x2f9c, 0x3094, 0x0f8c, 0x1084, 0x3084, 0x317c,
0xadcc, 0x0bbc, 0x6cc4, 0x8dcc, 0x0ed5, 0x0ed5, 0x4bbc, 0x6cc4,
0xeed4, 0x8ccc, 0x2bbc, 0x4bc4, 0x48ab, 0x4bc4, 0x2bc4, 0x68ab,
0x0abc, 0x2bc4, 0xa9b3, 0xadd4, 0x8ccc, 0x6ccc, 0x06a3, 0x47ab,
0x8cdc, 0x2eed, 0xccdc, 0x8bdc, 0xabdc, 0xa8bb, 0x6bd4, 0x4acc,
0xacd4, 0xcddc, 0xb0f5, 0x4fe5, 0x50e5, 0x10e5, 0x11f5, 0xcccb,
0x31ed, 0x92f5, 0x92ed, 0xd2ed, 0x33f6, 0x32f6, 0xb1ed, 0x2edd,
0x6fed, 0xf0f5, 0xf1f5, 0xacc4, 0xedcc, 0x4fdd, 0x90ed, 0x91ed,
0xb2e5, 0x10c5, 0x6f9c, 0x5094, 0x308c, 0x308c, 0x107c, 0x307c,
0x89ab, 0x0bbc, 0x2bbc, 0x0bb4, 0x89ab, 0x0ab4, 0xa9ab, 0x2bbc,
0xc9b3, 0x0ab4, 0xc9b3, 0x68ab, 0x68ab, 0x4cc4, 0xcab3, 0xced4,
0x6bc4, 0xcdcc, 0x4fdd, 0x0fdd, 0x8dcc, 0x8dcc, 0xc9b3, 0x4fed,
0x0ee5, 0x8bd4, 0xe5a2, 0x25ab, 0xecdc, 0x2ac4, 0xeddc, 0x90ed,
0x2ee5, 0x2ee5, 0x6fed, 0x4fe5, 0xefdc, 0x71ed, 0x31ed, 0x0dcc,
0xf0dc, 0x31dd, 0xb2ed, 0x91e5, 0x13f6, 0x12f6, 0xd2f5, 0x12fe,
0x0ddd, 0xedd4, 0xf1f5, 0x12f6, 0xf1ed, 0x4fdd, 0x70e5, 0xb2ed,
0xb2e5, 0x31c5, 0xb0a4, 0x719c, 0x308c, 0x308c, 0x1184, 0x3184,
0x8dc4, 0x0bbc, 0x8dcc, 0x4cc4, 0xeab3, 0x2bbc, 0x89ab, 0x47a3,
0x27a3, 0xe69a, 0x48a3, 0xa58a, 0xa58a, 0x4482, 0x0793, 0xcaab,
0x2bbc, 0xcaab, 0xcaab, 0xaecc, 0x8dcc, 0x2fe5, 0x2fe5, 0xe9bb,
0xe59a, 0x09c4, 0x8bd4, 0xccdc, 0x4acc, 0xacd4, 0xeddc, 0x6ccc,
0x0ee5, 0xcddc, 0x4bcc, 0xcedc, 0x30e5, 0xf0dc, 0xf0e4, 0x6792,
0x4ecc, 0xf0d4, 0x30dd, 0x92e5, 0x91e5, 0xb2ed, 0x71ed, 0x70ed,
0x4fe5, 0xb0f5, 0x4fe5, 0x12f6, 0x53fe, 0x90dd, 0x2fd5, 0x50dd,
0x91dd, 0x10c5, 0x90a4, 0x919c, 0x7194, 0x308c, 0x528c, 0xb394,
0x4bbc, 0x6cc4, 0x2bbc, 0xcab3, 0xeab3, 0x48a3, 0x079b, 0x8592,
0xc692, 0x0bbc, 0x69ab, 0xebb3, 0x289b, 0x289b, 0xe792, 0x489b,
0x0cb4, 0x8aa3, 0x89ab, 0x89ab, 0x0fdd, 0x4ccc, 0xcedc, 0x6cd4,
0xc9bb, 0xeddc, 0xccdc, 0x4acc, 0x2acc, 0x47ab, 0x0ee5, 0x6cd4,
0x0ee5, 0x2fe5, 0x2fe5, 0xefe4, 0xafdc, 0x6ed4, 0xacbb, 0x0682,
0xe9a2, 0x2ec4, 0xf0dc, 0x52e5, 0xd3f5, 0xd2f5, 0x91ed, 0x2fdd,
0x4fe5, 0x0edd, 0xb1f5, 0xd2f5, 0x91e5, 0xd2ed, 0x50dd, 0x91e5,
0xb1dd, 0x71cd, 0x52bd, 0x95bd, 0x54b5, 0x54ad, 0xd394, 0x928c,
0xeab3, 0x68a3, 0xc9b3, 0x48a3, 0x079b, 0xa692, 0xc69a, 0xc69a,
0x28a3, 0xa692, 0x69ab, 0x289b, 0x289b, 0x289b, 0xe792, 0x69a3,
0x0cb4, 0x499b, 0x0cb4, 0x4cc4, 0x0fdd, 0x8dd4, 0xc9bb, 0x90f5,
0xeddc, 0xecdc, 0x09c4, 0x06a3, 0x2bcc, 0x2bcc, 0xeee4, 0xeee4,
0x2fe5, 0x0abc, 0x30e5, 0x30ed, 0x6edc, 0x09ab, 0x4bb3, 0x0682,
0x068a, 0x6792, 0x2ec4, 0xb0d4, 0x31e5, 0x92ed, 0x71e5, 0xd2ed,
0x90ed, 0xadcc, 0x8dcc, 0x70e5, 0xd2ed, 0x50dd, 0x0ed5, 0x2fdd,
0x50dd, 0x10c5, 0xb0ac, 0x5094, 0x308c, 0x1084, 0x107c, 0x5184,
0xa9ab, 0x279b, 0x68ab, 0x47a3, 0xc69a, 0x448a, 0xe381, 0x648a,
0xa692, 0xe79a, 0x89ab, 0xaaab, 0xebb3, 0x0bb4, 0xcaab, 0xaaa3,
0x4dbc, 0xcfc4, 0x0bb4, 0xadcc, 0x8ccc, 0x2ee5, 0x4bcc, 0xc9bb,
0x26a3, 0x87ab, 0x88b3, 0x70ed, 0x8cd4, 0x4fed, 0x2fed, 0x4ccc,
0xadd4, 0x50e5, 0xf0dc, 0x6ed4, 0x0ab3, 0x4bbb, 0xcaaa, 0x4892,
0x2fd4, 0x4471, 0x8892, 0x4fcc, 0x31e5, 0x51e5, 0x72e5, 0xefd4,
0x91e5, 0x90ed, 0x6cc4, 0xefd4, 0x50dd, 0x91e5, 0xadcc, 0xeed4,
0x50dd, 0x4db4, 0x2f9c, 0x5094, 0x508c, 0x5084, 0x5184, 0x5184,
0x848a, 0x237a, 0x027a, 0x0382, 0x648a, 0x448a, 0x27a3, 0xc69a,
0xe79a, 0x089b, 0xc692, 0x49a3, 0x2cb4, 0xaaab, 0xeecc, 0x0cb4,
0x2993, 0x92e5, 0x89a3, 0x89ab, 0x4fe5, 0x6bcc, 0x4ac4, 0x87ab,
0x26a3, 0x2bc4, 0x90ed, 0x8dcc, 0xcedc, 0x6ccc, 0x8cd4, 0x8cd4,
0xced4, 0x8ecc, 0xecbb, 0xc89a, 0x0ed4, 0xb1ec, 0xcec3, 0x34f5,
0x91dc, 0x4cb3, 0x0361, 0x2aa3, 0x4ecc, 0x10dd, 0x10d5, 0xf3ed,
0x8dc4, 0x70e5, 0x50e5, 0xebb3, 0x8dc4, 0x91e5, 0x91ed, 0xced4,
0x30d5, 0xafbc, 0x2f9c, 0x308c, 0x508c, 0x5184, 0x317c, 0x317c,
0xe69a, 0xc59a, 0xe69a, 0x438a, 0x438a, 0x27ab, 0x68ab, 0x48a3,
0x48a3, 0xaaab, 0xcbab, 0xebab, 0xebab, 0xebab, 0x89a3, 0x30d5,
0xebab, 0xe792, 0x69a3, 0xaecc, 0x2bbc, 0x68ab, 0xa492, 0xc171,
0x6ccc, 0x0bc4, 0xadd4, 0xeedc, 0xc9b3, 0x0bc4, 0x4ccc, 0xeedc,
0x2cc4, 0xe479, 0xe9a2, 0x4ed4, 0xcdcb, 0x2fd4, 0x2fd4, 0xb1dc,
0x70dc, 0xd1e4, 0x6cb3, 0xa471, 0xabab, 0x2dbc, 0x10d5, 0xefd4,
0xcecc, 0x4cbc, 0xb2ed, 0x71e5, 0xcecc, 0x30dd, 0x6dc4, 0x8ec4,
0x92dd, 0x11bd, 0x3094, 0x308c, 0x3084, 0x307c, 0x3084, 0x5184,
0xe69a, 0xe59a, 0xe59a, 0x67ab, 0x8492, 0x0abc, 0x8dcc, 0x4cc4,
0x0bbc, 0xaaab, 0xcbab, 0x0cb4, 0x2893, 0x51dd, 0x89a3, 0x2893,
0xe792, 0x079b, 0xcaab, 0x48a3, 0x68a3, 0xa9b3, 0x68ab, 0x2bc4,
0xeedc, 0x71ed, 0x48ab, 0x89b3, 0x648a, 0x8dd4, 0x4ccc, 0x6dcc,
0xa371, 0x8ab3, 0xedc3, 0xedc3, 0x11ed, 0x6fdc, 0x70d4, 0x91d4,
0xb0dc, 0xb0dc, 0xf1dc, 0x2682, 0xe892, 0xecb3, 0xaecc, 0x71e5,
0x0fd5, 0x89a3, 0x8dc4, 0x91e5, 0x30dd, 0x71dd, 0x0fd5, 0x4dbc,
0xafbc, 0x0d9c, 0x5094, 0xb294, 0x139d, 0xf394, 0xef7b, 0x107c,
0x6392, 0x438a, 0x438a, 0x47a3, 0x47a3, 0xeabb, 0xeab3, 0xeab3,
0xcaab, 0xebab, 0xaaa3, 0x699b, 0x4993, 0x2993, 0x2893, 0x69a3,
0xcab3, 0x279b, 0xa9ab, 0x89ab, 0x0fdd, 0x4cc4, 0x49a3, 0xd2f5,
0x2bc4, 0xe69a, 0x2382, 0xb1f5, 0x68ab, 0x89b3, 0xaab3, 0xa692,
0x8ab3, 0x2cc4, 0x4ecc, 0x8fd4, 0x6ed4, 0xd0dc, 0x12e5, 0x32e5,
0x31e5, 0x52e5, 0x72e5, 0x0893, 0xe892, 0x69a3, 0x69ab, 0x4cc4,
0x8dcc, 0x0bb4, 0x0793, 0xadc4, 0xf2ed, 0x8dbc, 0x30d5, 0xf3e5,
0xafb4, 0x6f9c, 0x0f84, 0x5184, 0x3184, 0xb294, 0x3084, 0x3084,
0x638a, 0xe59a, 0xc59a, 0xe9bb, 0xeabb, 0xeabb, 0xc9b3, 0xeab3,
0x89a3, 0xaaa3, 0xefcc, 0xaaa3, 0xe78a, 0xc78a, 0xe78a, 0x489b,
0x489b, 0x68a3, 0xa9ab, 0x89ab, 0x89ab, 0xaab3, 0xcbb3, 0x4cc4,
0x0bbc, 0x279b, 0xa592, 0xa9b3, 0x0bbc, 0x69ab, 0x4482, 0x89ab,
0xebbb, 0x2cc4, 0x2dc4, 0x8ed4, 0x4dcc, 0x10e5, 0xd0dc, 0xafd4,
0x10dd, 0x72e5, 0x52dd, 0xaec4, 0xcbab, 0x49a3, 0x0bbc, 0x0bbc,
0x0bbc, 0x89ab, 0xcaab, 0x4cbc, 0x51dd, 0x8ebc, 0x4cb4, 0x8eb4,
0xb4cd, 0xb8de, 0xef7b, 0x5184, 0x718c, 0x308c, 0x518c, 0x9294,
0x27a3, 0xa9b3, 0x27a3, 0x47a3, 0xa9b3, 0xa592, 0xa592, 0x279b,
0xa9ab, 0xeed4, 0x69a3, 0x489b, 0xe792, 0x0793, 0x289b, 0xe792,
0x499b, 0xa9a3, 0x48a3, 0x489b, 0x89ab, 0x48a3, 0x0fdd, 0x69a3,
0x71e5, 0xe792, 0x4582, 0x49a3, 0x6dc4, 0xc692, 0xcbb3, 0x8dcc,
0xaab3, 0xebbb, 0x0cc4, 0xaed4, 0x8dd4, 0xaed4, 0x8ed4, 0xced4,
0x0fdd, 0x0fdd, 0x71e5, 0xcfcc, 0x6dc4, 0xaaab, 0xaaab, 0x2cbc,
0xaaab, 0x2bbc, 0x0fd5, 0x0fcd, 0x8ec4, 0x30d5, 0x6dbc, 0xefc4,
0xb1ac, 0x919c, 0xd29c, 0x59c6, 0x308c, 0x3084, 0x3084, 0x5184,
0x069b, 0x68ab, 0x069b, 0x48a3, 0x88ab, 0x27a3, 0xa9b3, 0x68ab,
0xcdd4, 0x68a3, 0xcab3, 0xe792, 0xc792, 0x0793, 0xa68a, 0x0793,
0xc68a, 0xe792, 0x0793, 0x489b, 0x079b, 0x079b, 0x079b, 0x0793,
0x30dd, 0x8682, 0x0cb4, 0xcbb3, 0xefd4, 0xaaab, 0x8ab3, 0x2cc4,
0xcbbb, 0xadd4, 0x2ccc, 0x4ccc, 0x0bc4, 0x8dd4, 0xeedc, 0xced4,
0xaecc, 0xefd4, 0x30dd, 0x71e5, 0x8ec4, 0xaaab, 0x8aa3, 0xcbab,
0x0bb4, 0x8dc4, 0xcecc, 0xaec4, 0x30dd, 0x2cbc, 0x6dbc, 0x8eb4,
0x0f94, 0x108c, 0x508c, 0x34a5, 0xf7bd, 0x718c, 0x3084, 0x5184,
0x47a3, 0xc592, 0x069b, 0xa58a, 0x069b, 0xe9b3, 0x28a3, 0xcab3,
0x48a3, 0xc692, 0x079b, 0x089b, 0x8582, 0xc68a, 0x858a, 0xc692,
0xc78a, 0x2893, 0x489b, 0x0793, 0xc68a, 0xcaab, 0x079b, 0xe792,
0x4dbc, 0x289b, 0xaecc, 0x2dbc, 0xefd4, 0xebb3, 0x8ab3, 0x2cc4,
0x0bc4, 0xeabb, 0x69b3, 0xcabb, 0x4ccc, 0xadd4, 0x8dcc, 0x8dcc,
0xefdc, 0x0fd5, 0xefd4, 0x51dd, 0x0fcd, 0xebab, 0xaaa3, 0xcbab,
0x4cbc, 0x4cbc, 0x6dbc, 0x6dbc, 0x8dc4, 0xf3ed, 0x8ebc, 0x2da4,
0x709c, 0x508c, 0x1084, 0x5084, 0x75ad, 0xae73, 0xdbd6, 0x3184,
0xa9ab, 0x6482, 0x4382, 0xe692, 0x6482, 0x648a, 0xc271, 0xc692,
0x6582, 0xa58a, 0xc792, 0x0793, 0xa68a, 0x0372, 0xe792, 0xe792,
0x2893, 0x499b, 0x0893, 0xe792, 0x0793, 0xeed4, 0x489b, 0x69a3,
0x8ec4, 0x0893, 0x8aa3, 0x8aab, 0x0fdd, 0x0bbc, 0x6dcc, 0x0bbc,
0xcabb, 0xa9b3, 0x2bc4, 0xeabb, 0x0bc4, 0x4ccc, 0x4cc4, 0xefdc,
0xefdc, 0x8ecc, 0x71dd, 0x71dd, 0xefcc, 0x2cb4, 0x2cb4, 0xebab,
0xaaa3, 0xeaab, 0xcaa3, 0x8dbc, 0xaec4, 0xcec4, 0xd0bc, 0x6fac,
0x709c, 0x0f84, 0x718c, 0x3084, 0x518c, 0x5084, 0x928c, 0x928c,
0x069b, 0x47a3, 0x8482, 0x68a3, 0x89ab, 0x2482, 0xcab3, 0x6582,
0xe792, 0xc78a, 0x8682, 0xe469, 0x447a, 0x657a, 0x2472, 0x857a,
0x2893, 0x499b, 0x499b, 0x289b, 0x289b, 0xaaab, 0x489b, 0x489b,
0x0cb4, 0xaaab, 0xebb3, 0x2cbc, 0x10dd, 0x89ab, 0xebbb, 0x69ab,
0x27a3, 0xcab3, 0x4ccc, 0x2bc4, 0xa9b3, 0x0bc4, 0x4cc4, 0xaed4,
0xefdc, 0x8ec4, 0x30d5, 0x10d5, 0x8ebc, 0x6db4, 0x0cac, 0xcaa3,
0x0bac, 0xa682, 0xe78a, 0x0893, 0x8aa3, 0xeca3, 0xed9b, 0x95c5,
0x2f8c, 0x2f84, 0x3084, 0x3084, 0x3084, 0x3084, 0x307c, 0xd394,
0x638a, 0x059b, 0xa492, 0x648a, 0x848a, 0x079b, 0x4cc4, 0x289b,
0x8582, 0x0472, 0x457a, 0x657a, 0x667a, 0xa682, 0x867a, 0xe88a,
0xe78a, 0x2893, 0x0893, 0xc68a, 0x489b, 0xaaab, 0xe792, 0xaaab,
0xaaab, 0x499b, 0xaaab, 0x6dc4, 0x0bb4, 0xcab3, 0xaab3, 0x27a3,
0x89ab, 0x68ab, 0x6ccc, 0xcabb, 0x0bbc, 0xcabb, 0x4cc4, 0x10dd,
0x30dd, 0x8ec4, 0x10d5, 0x10cd, 0x6db4, 0x6db4, 0xaebc, 0x2cac,
0xcaa3, 0xcaab, 0x6dc4, 0x0bb4, 0x2cb4, 0xcb9b, 0x0e9c, 0x5094,
0x13a5, 0x0f84, 0x3084, 0x5184, 0x5084, 0x0f7c, 0x307c, 0x928c,
0xa7bb, 0x04a3, 0xc4a2, 0xc49a, 0x05a3, 0x26a3, 0x68ab, 0xe79a,
0x28a3, 0x089b, 0x447a, 0x247a, 0x457a, 0x657a, 0xa682, 0x667a,
0xc782, 0xe78a, 0xc78a, 0xe78a, 0x489b, 0x289b, 0x489b, 0xaaab,
0x69a3, 0x69a3, 0x0bb4, 0xaaab, 0xaaab, 0xadcc, 0xaab3, 0x48a3,
0xa9b3, 0xcab3, 0xc9b3, 0x0abc, 0x2bc4, 0x0bbc, 0x4cc4, 0xcecc,
0xf0d4, 0xafcc, 0xcfcc, 0x8ebc, 0x8dbc, 0x0cb4, 0x2cb4, 0x899b,
0x89a3, 0x69a3, 0xc692, 0xeed4, 0x8dbc, 0x4dac, 0x0f94, 0x108c,
0x13a5, 0x5084, 0x3084, 0x3184, 0x5084, 0x307c, 0x307c, 0x5184,
0xa7c3, 0x29cc, 0xe8c3, 0x46b3, 0x66b3, 0xe5a2, 0xe6a2, 0x68ab,
0xa592, 0x6482, 0x6582, 0x247a, 0x457a, 0x667a, 0x867a, 0x657a,
0xa682, 0xe78a, 0xa682, 0xc78a, 0xc78a, 0x289b, 0x89a3, 0x89a3,
0x69a3, 0x69a3, 0x8aab, 0x89ab, 0x89ab, 0x079b, 0x27a3, 0x0bbc,
0xc9b3, 0xc9b3, 0x6cc4, 0xa9ab, 0x2bbc, 0x0bb4, 0x2cbc, 0x30dd,
0x4dbc, 0x6dbc, 0xaec4, 0x4dbc, 0x2cb4, 0xcaab, 0x0bb4, 0x89a3,
0xa9ab, 0x68a3, 0x89ab, 0xa9ab, 0x0bb4, 0xcc9b, 0xef93, 0x308c,
0x3084, 0x3084, 0xef7b, 0x3184, 0x107c, 0x307c, 0x317c, 0x317c,
0x86bb, 0x66bb, 0xe8c3, 0xe9c3, 0x29cc, 0x67b3, 0x88b3, 0xa9b3,
0xa9b3, 0x48a3, 0x858a, 0xa369, 0x0472, 0x8682, 0x2572, 0x2572,
0x657a, 0xa682, 0x657a, 0xc78a, 0xc68a, 0xe792, 0x489b, 0x489b,
0x489b, 0xa9a3, 0xaaab, 0x489b, 0x89ab, 0x0bbc, 0x89ab, 0x68ab,
0x68a3, 0xcab3, 0xeab3, 0x0bb4, 0xeab3, 0xeab3, 0x8dc4, 0x6dbc,
0x4cb4, 0x2cb4, 0x6dbc, 0x4cbc, 0x0bb4, 0x0bbc, 0xcab3, 0x47a3,
0xe69a, 0xe69a, 0x06a3, 0xa9b3, 0x6dbc, 0x4eac, 0xee8b, 0x518c,
0x1084, 0x107c, 0x3084, 0x307c, 0x3084, 0x107c, 0x107c, 0x317c,
0x6adc, 0x6ad4, 0xe9c3, 0x46b3, 0x46ab, 0xc49a, 0x67b3, 0xa8b3,
0xe59a, 0x069b, 0x4482, 0xe371, 0xe371, 0x6582, 0x057a, 0x6682,
0x2472, 0x8682, 0xc792, 0x6582, 0xc68a, 0x6482, 0x489b, 0xe792,
0x69a3, 0x279b, 0x4cbc, 0x289b, 0x0793, 0x68a3, 0x68a3, 0xcab3,
0x2bbc, 0x0ab4, 0xa9ab, 0xeab3, 0xeaab, 0x0bb4, 0x2bb4, 0xebab,
0xeaab, 0x0bb4, 0x2bb4, 0xeab3, 0x0bbc, 0xa9b3, 0x2bcc, 0x6ccc,
0x2ac4, 0xe9bb, 0x6bcc, 0x6ccc, 0x6dbc, 0x8fb4, 0x709c, 0x5194,
0x1084, 0x1084, 0xf394, 0x718c, 0x5184, 0x317c, 0x317c, 0x5184,
0x49cc, 0xc8c3, 0xc8c3, 0xc8c3, 0xe8c3, 0xe8c3, 0xa7bb, 0xa49a,
0xc49a, 0x428a, 0x438a, 0xa171, 0xe279, 0xc271, 0xc379, 0x8269,
0x247a, 0xc68a, 0xc792, 0xc68a, 0xa68a, 0xe792, 0x289b, 0x279b,
0x0793, 0x079b, 0xeab3, 0xe692, 0xc68a, 0x4cbc, 0xc692, 0x489b,
0x68a3, 0x68a3, 0xa9ab, 0x89a3, 0xc9ab, 0xa9a3, 0xcaa3, 0x89a3,
0xcaab, 0x68a3, 0xa9ab, 0x88ab, 0x0abc, 0x2bcc, 0x6cd4, 0x4bcc,
0x8cd4, 0x8bd4, 0xcddc, 0xcdd4, 0x6dbc, 0x2ea4, 0x2f94, 0x9194,
0x3084, 0x1084, 0x3084, 0x3084, 0xd394, 0x7184, 0xf07b, 0x3184,
0xa7bb, 0x67b3, 0xe9c3, 0xa8bb, 0x46ab, 0xc49a, 0x09c4, 0x87b3,
0x46ab, 0x228a, 0xc59a, 0x8492, 0xe281, 0xc279, 0xe381, 0x6169,
0xa271, 0x037a, 0x037a, 0xa68a, 0xa68a, 0x0793, 0xa68a, 0xc68a,
0x0793, 0x858a, 0xe692, 0x279b, 0xa68a, 0xe792, 0x079b, 0x279b,
0x489b, 0x89a3, 0x68a3, 0x68a3, 0x479b, 0x68a3, 0x689b, 0x489b,
0x489b, 0xa9ab, 0x68a3, 0xeabb, 0x6ccc, 0x6bcc, 0x6cd4, 0x8cdc,
0xabdc, 0x0de5, 0x2de5, 0x0edd, 0x8ebc, 0x0d9c, 0x4f94, 0x5094,
0xef7b, 0x1084, 0x107c, 0x5184, 0x3184, 0x3184, 0x3184, 0x3184,
0x46ab, 0x46ab, 0xe9bb, 0xa8b3, 0x87b3, 0x46ab, 0x4acc, 0x2ac4,
0x87b3, 0x46ab, 0xa59a, 0x0382, 0x6492, 0x6071, 0x0382, 0xe381,
0x858a, 0x2382, 0x2482, 0x6482, 0xa58a, 0x48a3, 0xe692, 0x079b,
0xa58a, 0xc592, 0x0693, 0x4cbc, 0x489b, 0x079b, 0x68a3, 0x0793,
0x279b, 0x479b, 0xe692, 0x479b, 0x279b, 0x479b, 0x279b, 0x279b,
0x8482, 0x069b, 0xc592, 0x88ab, 0x2ac4, 0xacdc, 0xccdc, 0xacdc,
0xacdc, 0x0de5, 0x0ddd, 0x50dd, 0x51cd, 0x4ea4, 0x2f94, 0x9194,
0x3084, 0x1084, 0x3084, 0x5184, 0xf07b, 0x728c, 0x3084, 0x107c,
0x67ab, 0x638a, 0xe9bb, 0x26a3, 0xc8b3, 0xe59a, 0xc59a, 0x638a,
0x88b3, 0xa492, 0x2382, 0xe6a2, 0xa59a, 0xe6a2, 0x0382, 0x0382,
0x8592, 0x4382, 0xe279, 0x648a, 0x858a, 0x279b, 0xc692, 0xa58a,
0x848a, 0xc692, 0xe692, 0xc58a, 0xe692, 0x68a3, 0x279b, 0x0793,
0xe692, 0x279b, 0x079b, 0x279b, 0x279b, 0xe592, 0xc592, 0xa592,
0xc592, 0xc592, 0x47a3, 0x2ac4, 0xacd4, 0x0ddd, 0x2ee5, 0x4eed,
0x8ff5, 0x8ff5, 0x90ed, 0x2fd5, 0xafb4, 0x6fa4, 0x709c, 0x508c,
0x3084, 0x107c, 0x307c, 0x5184, 0x3184, 0x5184, 0x3084, 0x3184,
0xe49a, 0x05a3, 0xa392, 0x67ab, 0x8392, 0xe9bb, 0xc9bb, 0xc9bb,
0x0282, 0xc179, 0x06a3, 0xa592, 0xc59a, 0xc69a, 0x8492, 0xc279,
0x48ab, 0x6492, 0x848a, 0x648a, 0x648a, 0x858a, 0x4482, 0x6482,
0x858a, 0xc692, 0x279b, 0x279b, 0x69a3, 0x279b, 0x489b, 0x68a3,
0xa58a, 0xc592, 0xa592, 0xa492, 0xa492, 0xc592, 0xa592, 0xa492,
0x069b, 0x88ab, 0xe9bb, 0x8ccc, 0x2ee5, 0x2ddd, 0x4ee5, 0x0ddd,
0x4eed, 0x4ee5, 0x70e5, 0x2fcd, 0x8eac, 0x2e94, 0xee8b, 0x0f84,
0x1084, 0x107c, 0x307c, 0x5184, 0x3084, 0x5184, 0x9294, 0x3084,
0xa392, 0x05a3, 0x66ab, 0xe8bb, 0xc8bb, 0x26a3, 0x88b3, 0xc9bb,
0x67ab, 0xa492, 0x648a, 0xc279, 0xa171, 0x448a, 0xe281, 0x448a,
0x6492, 0x88b3, 0xa59a, 0xa592, 0x448a, 0x848a, 0xa9b3, 0x848a,
0x6482, 0xa58a, 0x079b, 0xe692, 0x079b, 0x489b, 0xe692, 0xc68a,
0xc592, 0x848a, 0xa492, 0x4382, 0xa592, 0xc59a, 0xe69a, 0x26a3,
0x47a3, 0x47a3, 0x0abc, 0xaccc, 0xeddc, 0x4ee5, 0x4ee5, 0x2ddd,
0x2ddd, 0x2ddd, 0x0ed5, 0xaebc, 0x2da4, 0xed8b, 0x0f8c, 0xef83,
0x3084, 0x107c, 0x107c, 0x107c, 0x107c, 0x107c, 0x1084, 0x718c,};
*/

void convertToBigEndian(uint16_t* input, int length) {
  for (int i = 0; i < length; i++) {
    input[i] = (input[i] << 8) | (input[i] >> 8);
  }
}

void displayText(String text, int yPos)
{
  int16_t x1, y1;
  uint16_t w, h;
  // matrix.setFont(&FreeSans9pt7b);

  matrix->setTextSize(1);
  char charBuf[text.length() + 1];
  text.toCharArray(charBuf, text.length() + 1);
  matrix->getTextBounds(charBuf, 0, yPos, &x1, &y1, &w, &h);
  // int startingX = 33 - (w / 2);
  matrix->setCursor(0, yPos);
  matrix->print(text);
}

/*ValueString_t valueTextArea1Header = {  .name = "Text Area 1: Header",
                                    .type = "string",
                                    .permission = READ_WRITE,
                                    .max = 20,
                                    .encoding = ""};
*/

ValueNumber_t intValueBrightness = {.name = "Brightness",
                                    .type = "int",
                                    .permission = READ_WRITE,
                                    .min = 0,
                                    .max = 100,
                                    .step = 1,
                                    .unit = "%",
                                    .si_conversion = ""};

ValueBlob_t genericBitmapValue = {.name = "Bitmap",
                                  .type = "value type",
                                  .permission = WRITE,
                                  .max = 2048,
                                  .encoding = ""};

ValueBlob_t genericRgbBitmapValue = {.name = "RGB565 Bitmap",
                                     .type = "value type",
                                     .permission = WRITE,
                                     .max = 4092,
                                     .encoding = ""};

ValueBlob_t genericCanvasValue = {.name = "Generic JSON input",
                                  .type = "value type",
                                  .permission = WRITE,
                                  .max = 512,
                                  .encoding = ""};

static  uint8_t bitmap[8192];


void controlRgbBitmapCallback(Value *value, String data, String timestamp)
{
  DynamicJsonDocument root(1024);
  DeserializationError err = deserializeJson(root, data);
  if (err)
  {
    Serial.print("Deserialization failed: ");
    Serial.println(err.f_str());
    return;
  }

  int16_t x = root["pos"]["x"];
  int16_t y = root["pos"]["y"];

  int16_t w = root["size"]["w"];
  int16_t h = root["size"]["h"];

  String url = root["url"];
  Serial.println(url);

  http.begin(url);

  int httpCode = http.GET();

  // httpCode will be negative on error
  if (httpCode > 0)
  {
    // HTTP header has been send and Server response header has been handled
    Serial.printf("[HTTP] GET... code: %d\n", httpCode);
    // file found at server
    if (httpCode == HTTP_CODE_OK)
    {
      uint8_t buffer[128] = {0}; //buffer for read

      WiFiClient* stream = http.getStreamPtr(); //pointer to tcp stream

      int contentLength = http.getSize(); //length of 'Content-Length' HTTP header
      Serial.println(contentLength);
      int index = 0;
      
      while(http.connected() && (contentLength > 0 && contentLength <= 8192 || contentLength == -1))
      {
        size_t size = stream->available();
        if(size)
        {
          int c = stream->readBytes(buffer, ((size > sizeof(buffer)) ? sizeof(buffer) : size));

          memcpy(bitmap +index, buffer, c);
          
        
          index+=c;

          if(contentLength > 0) 
          {
            contentLength -= c;
          }
          Serial.print("contentLength: ");
          Serial.print(contentLength);
          Serial.print(" size: ");
          Serial.print(size);
          Serial.print(" c: ");
          Serial.print(c);
          Serial.print(" index: ");
          Serial.println(index);
        }
      }
      //Serial.println((int)bitmap);
      
    }
  }
  else
  {
    Serial.printf("[HTTP] GET... failed, error: %s\n", http.errorToString(httpCode).c_str());
  }

  http.end();

  Serial.println("Got it");

  //uint16_t bitmap[payload.length()] = strtoul(payload.c_str(), NULL, 16);

  uint16_t* cat = (uint16_t*) bitmap;

  //convertToBigEndian(cat, w * h);
  
  GFXcanvas16 catCanvas(64,64);

  memset(monoBitmap, 0xff, 512);
  matrix->clearScreen();

  catCanvas.drawRGBBitmap(0, 0, cat, monoBitmap, 64, 64);

  matrix->drawRGBBitmap(0,0, catCanvas.getBuffer(), 64, 64);

  /*canvas.drawRGBBitmap(0,0, rgbBitmap, w,h); // drawing "rgbBitmap" to a canvas
  matrix->drawRGBBitmap(x,y, canvas.getBuffer(), w, h); // drawing canvas on a screen */
}

void controlBitmapCallback(Value *value, String data, String timestamp)
{
  // StaticJsonDocument<2048> root;
  DynamicJsonDocument root(2048);
  DeserializationError err = deserializeJson(root, data);
  if (err)
  {
    Serial.print("Deserialization failed: ");
    Serial.println(err.f_str());
    return;
  }

  int16_t x = root["pos"]["x"];
  int16_t y = root["pos"]["y"];

  int16_t w = root["size"]["w"];
  int16_t h = root["size"]["h"];

  String bColor = root["clr"]["hex"];

  uint16_t bitColorHex = (uint16_t)strtoul(bColor.c_str() + 2, NULL, 16);

  GFXcanvas1 canvas(w, h);
  canvas.fillScreen(0x0000);

  String bitMapString = root["bitMap"];

  uint8_t monoBitmap[bitMapString.length() / 2]; /* setting the size of "monoBitmap" to half of bitMapString
                                                    since 2 chars = 1 hex value */

  for (int i = 0; i < bitMapString.length(); i += 2)
  {
    char hexPair[3];                               // 3 character array, 2 char for hex value 1 for NULL termination.
    strncpy(hexPair, bitMapString.c_str() + i, 2); // copying two characters from bitMapString to hexPair.
    hexPair[2] = '\0';                             // adding NULL termination to hexPair array.

    monoBitmap[i / 2] = (uint8_t)strtoul(hexPair, NULL, 16);
    /*Serial.print(i);
    Serial.print(" ");
    Serial.println(monoBitmap[i/2], HEX); */
  }

  canvas.drawXBitmap(0, 0, monoBitmap, w, h, bitColorHex);         // drawing "monoBitmap" to a canvas
  matrix->drawBitmap(x, y, canvas.getBuffer(), w, h, bitColorHex); // drawing canvas on a screen
}

void controlBlobCallback(Value *value, String data, String timestamp)
{
  StaticJsonDocument<512> root;
  DeserializationError err = deserializeJson(root, data);
  if (err)
  {
    Serial.print("Deserialization failed: ");
    Serial.println(err.f_str());
    return;
  }

  int16_t x = root["pos"]["x"];
  int16_t y = root["pos"]["y"];

  int16_t w = root["size"]["w"];
  int16_t h = root["size"]["h"];

  GFXcanvas1 canvas(w, h);
  canvas.fillScreen(0x0000);

  String text = root["txt"]["str"];

  int16_t textSize = root["tSize"]["int"];

  String textColor = root["tClr"]["hex"];
  String bgColor = root["bClr"]["hex"];

  uint16_t textHex = (uint16_t)strtoul(textColor.c_str() + 2, NULL, 16);
  uint16_t bgHex = (uint16_t)strtoul(bgColor.c_str() + 2, NULL, 16);

  canvas.setCursor(0, 0);
  canvas.setTextSize(textSize);
  canvas.println(text);
  // canvas.printf(text.c_str());

  Serial.println(x);
  Serial.println(y);
  Serial.println(w);
  Serial.println(h);
  Serial.println(text);
  Serial.println(textHex, HEX);
  Serial.println(bgHex, HEX);
  Serial.println(textSize);
  Serial.println(root.memoryUsage());

  matrix->drawBitmap(x, y, canvas.getBuffer(), canvas.width(), canvas.height(), textHex, bgHex);
}

void controlBrightnessCallback(Value *value, String data, String timestamp)
{
  int brightness = (data.toInt() / 100.0f) * 255;
  matrix->setBrightness8(brightness);
}

void initializeWifi(void)
{
  Serial.println("Initializing WiFi");
  WiFiMulti.addAP(ssid, password);

  matrix->setCursor(0, 0);
  matrix->print("Connecting");
  matrix->setCursor(0, 8);
  matrix->print(ssid);

  uint16_t notConnected = 0;

  while (WiFiMulti.run() != WL_CONNECTED)
  {
    Serial.println("WiFi not connected");

    matrix->drawXBitmap(28, 28, wifiIcon8x8, 8, 8, 0xe280);
    delay(500);
    matrix->drawXBitmap(28, 28, wifiIcon8x8, 8, 8, 0x0000);

    notConnected++;
    if (notConnected > 150)
    {
      Serial.println("Resetting the controller: WiFI not connecting");
      ESP.restart();
    }
  }

  matrix->drawXBitmap(28, 28, wifiIcon8x8, 8, 8, 0x0460);

  matrix->setCursor(0, 37);
  matrix->print("Connected");

  matrix->setCursor(0, 44);
  matrix->println(WiFi.localIP());

  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
}

void setup()
{
  Serial.begin(115200);

  HUB75_I2S_CFG::i2s_pins _pins = {R1_PIN,
                                   G1_PIN,
                                   B1_PIN,
                                   R2_PIN,
                                   G2_PIN,
                                   B2_PIN,
                                   A_PIN,
                                   B_PIN,
                                   C_PIN,
                                   D_PIN,
                                   E_PIN,
                                   LAT_PIN,
                                   OE_PIN,
                                   CLK_PIN};
  HUB75_I2S_CFG mxconfig(
      MATRIX_WIDTH,          // module width
      MATRIX_HEIGHT,         // module height
      1,                     // Chain length
      _pins,                 // pin mapping
      HUB75_I2S_CFG::FM6126A // driver chip
  );

  mxconfig.clkphase = false;
  matrix = new MatrixPanel_I2S_DMA(mxconfig);
  matrix->begin();
  matrix->setBrightness8(255);
  initializeWifi();
  initializeNtp();

  wappsto.config(network_uuid, ca, client_crt, client_key, 5, NO_LOGS);
  if (wappsto.connect())
  {
    Serial.println("Connected to Wappsto");
  }
  else
  {
    Serial.println("Could not connect");
  }

  // Create network
  myNetwork = wappsto.createNetwork("Display 64x64");

  // Create device
  myDevice = myNetwork->createDevice(&myDeviceDescription);

  // Create Bitmap value
  monochromeBitMap = myDevice->createBlobValue(&genericBitmapValue);
  monochromeBitMap->onControl(&controlBitmapCallback);

  // Create RGB565 Bitmap value
  rgbBitmap = myDevice->createBlobValue(&genericRgbBitmapValue);
  rgbBitmap->onControl(&controlRgbBitmapCallback);

  // Create a Value for brightness control
  brightnessValue = myDevice->createValueNumber(&intValueBrightness);
  brightnessValue->onControl(&controlBrightnessCallback);

  // Create a Value for genericCanvas
  genericCanvas = myDevice->createBlobValue(&genericCanvasValue);
  genericCanvas->onControl(&controlBlobCallback);

}

void loop()
{
  wappsto.dataAvailable();

  // debug led
  if (e == 0)
  {
    matrix->drawPixel(63, 63, matrix->color565(0, 255, 0));
    e++;
  }
  else
  {
    matrix->drawPixel(63, 63, matrix->color565(255, 0, 0));
    e = 0;
    // matrix->drawPixel(63,63, matrix->color565(0,0,255));
  }
}
